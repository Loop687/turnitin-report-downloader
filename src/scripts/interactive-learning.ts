import { TurnitinScraperService } from '../services/turnitin-scraper.service';
import { InteractiveTrackerService } from '../services/interactive-tracker.service';
import * as readline from 'readline';

async function interactiveLearningSession() {
    const scraper = new TurnitinScraperService(true);
    const tracker = new InteractiveTrackerService();
    
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    const askQuestion = (question: string): Promise<string> => {
        return new Promise((resolve) => {
            rl.question(question, resolve);
        });
    };

    try {
        console.log('üéì MODO APRENDIZAJE INTERACTIVO - Scraper de Turnitin');
        console.log('====================================================');
        console.log('En este modo, T√ö har√°s clic manualmente en el navegador');
        console.log('y el sistema grabar√° cada paso para luego automatizarlo.');
        console.log('');

        await scraper.initializeBrowser();
        const page = await scraper.createNewPage();

        tracker.startTrackingSession(
            'Descargar reporte de IA desde trabajo de estudiante',
            'https://www.turnitin.com/assignment/type/paper/inbox/170792714?lang=en_us'
        );

        console.log('\nüöÄ PASO 1: Navegaci√≥n inicial');
        await page.goto('https://www.turnitin.com/assignment/type/paper/inbox/170792714?lang=en_us', { waitUntil: 'networkidle2' });
        await tracker.recordAction(page, 'navigate', 'Navegaci√≥n a bandeja de entrada de Turnitin');

        const currentUrl = page.url();
        if (currentUrl.includes('login')) {
            console.log('\nüîê Se detect√≥ p√°gina de login');
            await askQuestion('Por favor, inicia sesi√≥n manualmente en el navegador y presiona ENTER cuando est√©s en la p√°gina de trabajos...');
            await tracker.recordAction(page, 'wait', 'Esperando login manual del usuario');
        }

        console.log('\nüìã PASO 2: Selecci√≥n de trabajo de estudiante');
        console.log('Instrucciones:');
        console.log('1. En el navegador, busca un trabajo de estudiante en la tabla');
        console.log('2. HAZ CLIC EN EL T√çTULO del trabajo (NO en el enlace del estudiante)');
        console.log('3. Esto deber√≠a abrirte la vista del trabajo (ev.turnitin.com/app/carta/...)');
        console.log('');

        const workTitle = await askQuestion('¬øCu√°l es el t√≠tulo del trabajo en el que hiciste clic? ');
        await askQuestion('Presiona ENTER despu√©s de hacer clic en el t√≠tulo del trabajo...');
        
        await tracker.recordAction(page, 'click', `Usuario hizo clic en trabajo: "${workTitle}"`, {
            text: workTitle
        });

        await page.waitForTimeout(5000);
        
        console.log('\nü§ñ PASO 3: Localizaci√≥n del reporte de IA');
        console.log('Instrucciones:');
        console.log('1. Ahora deber√≠as estar en la p√°gina del trabajo (carta)');
        console.log('2. Busca un bot√≥n, enlace o porcentaje relacionado con IA');
        console.log('3. Puede decir "AI", mostrar un porcentaje como "54%" o "AI Writing Report"');
        console.log('4. HAZ CLIC en ese elemento');
        console.log('');

        const aiElementText = await askQuestion('¬øQu√© texto tiene el elemento de IA en el que hiciste clic? ');
        await askQuestion('Presiona ENTER despu√©s de hacer clic en el elemento de IA...');

        await tracker.recordAction(page, 'click', `Usuario hizo clic en elemento de IA: "${aiElementText}"`, {
            text: aiElementText
        });

        await page.waitForTimeout(8000);

        console.log('\nüì• PASO 4: Descarga del reporte');
        console.log('Instrucciones:');
        console.log('1. Ahora deber√≠as estar en la p√°gina del reporte de IA');
        console.log('2. Busca un bot√≥n de "Download", "Descargar" o similar');
        console.log('3. HAZ CLIC en ese bot√≥n para descargar el PDF');
        console.log('');

        const downloadResult = await askQuestion('¬øSe descarg√≥ exitosamente el PDF? (s/n): ');
        
        if (downloadResult.toLowerCase() === 's') {
            const downloadButtonText = await askQuestion('¬øQu√© texto ten√≠a el bot√≥n de descarga? ');
            await tracker.recordAction(page, 'download', `Usuario descarg√≥ usando bot√≥n: "${downloadButtonText}"`, {
                text: downloadButtonText
            });

            await tracker.finishSession('success', `Descarga exitosa del reporte de IA para trabajo: ${workTitle}`);
            
            console.log('\nüéâ ¬°EXCELENTE! Sesi√≥n de aprendizaje completada exitosamente');
            console.log('El sistema ha grabado todos los pasos y puede ahora automatizar este proceso.');
            
        } else {
            await tracker.finishSession('failed', 'No se pudo completar la descarga');
            console.log('\n‚ö†Ô∏è Sesi√≥n marcada como fallida. Puedes intentar de nuevo.');
        }

    } catch (error) {
        console.error('‚ùå Error durante la sesi√≥n de aprendizaje:', error);
        if (tracker) {
            await tracker.finishSession('failed', `Error: ${error}`);
        }
    } finally {
        rl.close();
        await scraper.closeBrowser();
    }
}

if (require.main === module) {
    interactiveLearningSession()
        .catch(error => {
            console.error('‚ùå Error fatal:', error);
            process.exit(1);
        });
}
