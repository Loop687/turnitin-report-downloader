"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const turnitin_scraper_service_1 = require("../services/turnitin-scraper.service");
const path_1 = __importDefault(require("path"));
async function runScraper() {
    const debugMode = process.argv.includes('--debug');
    const scraper = new turnitin_scraper_service_1.TurnitinScraperService(debugMode);
    try {
        console.log('ü§ñ Iniciando scraper autom√°tico de Turnitin...');
        console.log('üîç Modo:', debugMode ? 'DEBUG' : 'NORMAL');
        console.log('');
        console.log('üìã INSTRUCCIONES:');
        console.log('1. ‚úÖ El script abrir√° un navegador autom√°ticamente');
        console.log('2. ‚úÖ Si te pide login, inicia sesi√≥n manualmente');
        console.log('3. ‚úÖ El script buscar√° y descargar√° los reportes de IA autom√°ticamente');
        console.log('');
        // Inicializar navegador
        await scraper.initializeBrowser();
        // Crear nueva p√°gina
        const page = await scraper.createNewPage();
        // Navegar directamente a la bandeja de entrada
        await scraper.navigateToTurnitinInbox(page);
        // Esperar un momento para verificar si necesita login
        console.log('‚è≥ Esperando 5 segundos para verificar el estado de la p√°gina...');
        await new Promise(resolve => setTimeout(resolve, 5000));
        // Verificar si estamos en la p√°gina correcta
        const currentUrl = page.url();
        console.log(`üìç URL actual: ${currentUrl}`);
        if (currentUrl.includes('login') || currentUrl.includes('signin')) {
            console.log('üîê Se detect√≥ p√°gina de login. Por favor:');
            console.log('   1. Inicia sesi√≥n manualmente en la ventana del navegador');
            console.log('   2. Navega hasta la bandeja de entrada de trabajos');
            console.log('   3. Ve a la URL espec√≠fica: https://www.turnitin.com/assignment/type/paper/inbox/170792714?lang=en_us');
            console.log('   4. Presiona ENTER aqu√≠ cuando est√©s en la p√°gina de trabajos...');
            await new Promise((resolve) => {
                process.stdin.setRawMode(true);
                process.stdin.resume();
                process.stdin.once('data', () => {
                    process.stdin.setRawMode(false);
                    resolve();
                });
            });
            console.log('‚úÖ Continuando con el an√°lisis...');
        }
        // Buscar reportes de forma interactiva
        let reports = await scraper.findSubmissionsWithAIReports(page);
        // Si no encontr√≥ reportes v√°lidos, intentar m√©todo alternativo
        if (reports.length === 0) {
            console.log('\nüîÑ Intentando m√©todo alternativo...');
            reports = await scraper.tryAlternativeMethodToFindReports(page);
        }
        if (reports.length === 0) {
            console.log('‚ÑπÔ∏è No se encontraron trabajos con reportes de IA disponibles');
            console.log('üí° Sugerencias:');
            console.log('   - Aseg√∫rate de estar en la p√°gina de trabajos/asignaciones');
            console.log('   - Verifica que haya trabajos enviados por estudiantes');
            console.log('   - Confirma que los trabajos tengan reportes de IA generados');
            console.log('   - Revisa el archivo page-analysis.json para m√°s detalles');
            // Mostrar informaci√≥n del an√°lisis de p√°gina si est√° disponible
            try {
                const analysisFile = path_1.default.join(scraper['downloadPath'], 'page-analysis.json');
                if (require('fs').existsSync(analysisFile)) {
                    console.log('\nüìÑ Revisa el an√°lisis detallado en:', analysisFile);
                }
            }
            catch (error) {
                // Ignorar errores del an√°lisis
            }
            return;
        }
        console.log(`\nüìã Encontrados ${reports.length} trabajos para procesar:`);
        reports.forEach((report, index) => {
            console.log(`   ${index + 1}. ${report.studentName} - ${report.assignmentTitle}`);
            console.log(`      ID: ${report.studentId}`);
            console.log(`      URL: ${report.reportUrl.substring(0, 80)}...`);
        });
        console.log('\nüöÄ Iniciando descarga de reportes de IA...');
        console.log('üìù Flujo esperado para cada trabajo:');
        console.log('   1. Navegar a la URL del trabajo (ev.turnitin.com/app/carta/...)');
        console.log('   2. Buscar y hacer clic en el bot√≥n/porcentaje de IA');
        console.log('   3. Descargar o capturar el reporte de IA');
        // Procesar cada reporte
        let successCount = 0;
        for (let i = 0; i < reports.length; i++) {
            const report = reports[i];
            console.log(`\nüéØ Procesando ${i + 1}/${reports.length}: ${report.studentName}`);
            const downloadedFile = await scraper.downloadAIReportFromSubmission(page, report);
            if (downloadedFile) {
                console.log(`‚úÖ Reporte descargado: ${downloadedFile}`);
                // Guardar en el sistema para que los estudiantes puedan descargarlo
                await scraper.saveReportToSystem(report, downloadedFile);
                successCount++;
            }
            else {
                console.log(`‚ö†Ô∏è No se pudo descargar el reporte para ${report.studentName}`);
            }
            // Pausa entre descargas para no sobrecargar el servidor
            if (i < reports.length - 1) {
                console.log('‚è≥ Esperando 3 segundos antes del pr√≥ximo reporte...');
                await new Promise(resolve => setTimeout(resolve, 3000));
            }
        }
        console.log('\n‚úÖ Proceso de scraping completado');
        console.log(`üìä Estad√≠sticas:`);
        console.log(`   - Trabajos encontrados: ${reports.length}`);
        console.log(`   - Reportes descargados exitosamente: ${successCount}`);
        console.log(`   - Reportes fallidos: ${reports.length - successCount}`);
        console.log(`üìÅ Archivos descargados en: ${scraper['downloadPath']}`);
    }
    catch (error) {
        console.error('‚ùå Error en el proceso de scraping:', error);
    }
    finally {
        console.log('\n‚è≥ Presiona ENTER para cerrar el navegador y salir...');
        process.stdin.setRawMode(true);
        process.stdin.resume();
        process.stdin.once('data', async () => {
            process.stdin.setRawMode(false);
            await scraper.closeBrowser();
            process.exit(0);
        });
    }
}
// Ejecutar si se llama directamente
if (require.main === module) {
    runScraper()
        .catch(error => {
        console.error('‚ùå Error fatal:', error);
        process.exit(1);
    });
}
